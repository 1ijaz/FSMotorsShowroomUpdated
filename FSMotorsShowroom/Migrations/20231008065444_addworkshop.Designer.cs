// <auto-generated />
using System;
using FSMotorsShowroom.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FSMotorsShowroom.Migrations
{
    [DbContext(typeof(FSDbContext))]
    [Migration("20231008065444_addworkshop")]
    partial class addworkshop
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FSMotorsShowroom.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyingPrice")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelMilage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvestorId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintananceCost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesTax")
                        .HasColumnType("int");

                    b.Property<int?>("SellingPrice")
                        .HasColumnType("int");

                    b.Property<int?>("ShowroomCost")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InvestorId");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doors")
                        .HasColumnType("int");

                    b.Property<string>("EngineImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelMilage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoresPower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteriorImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakeCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MakeYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoOfCylinders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassangerCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TankCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.Showroom", b =>
                {
                    b.Property<int>("ShowroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowroomId"));

                    b.Property<string>("ShowroomAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowroomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShowroomId");

                    b.ToTable("Showroom");
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("InvestorUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TaxRate")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvestorUserId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.WorkShop", b =>
                {
                    b.Property<int>("WorkShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkShopId"));

                    b.Property<string>("WorkShopName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkshopLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkShopId");

                    b.ToTable("WorkShop");
                });

            modelBuilder.Entity("FS_Motors.Models.UserType", b =>
                {
                    b.Property<int>("UserType_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserType_Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("User_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserType_Id");

                    b.ToTable("userTypes");
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.Investor", b =>
                {
                    b.HasBaseType("FSMotorsShowroom.Models.User");

                    b.Property<decimal>("InvestmentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvestmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvestmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnAllocatedAmout")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Investor");
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.Car", b =>
                {
                    b.HasOne("FSMotorsShowroom.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSMotorsShowroom.Models.Investor", "Investor")
                        .WithMany()
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Investor");
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.Transaction", b =>
                {
                    b.HasOne("FSMotorsShowroom.Models.Investor", null)
                        .WithMany("Transactions")
                        .HasForeignKey("InvestorUserId");
                });

            modelBuilder.Entity("FSMotorsShowroom.Models.Investor", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
